#!/bin/sh
# Script to handle jeamland backups.
# (c) Andy Fiddaman, 1996

# You may need to change these..
BACKUPS=$HOME/jeamland/backups
LIB=$HOME/jeamland/lib

usage() 
{
	cat << EOF
Recognised arguments are:
	-v			Verbose
	-q			Verbose off
	-mail <email address>	Send backup offsite to <email address>
	-nomail			Turn off offsite email.

	-audit			Backup and erase audit directory.
	-logs			Backup the logfiles.
	-snoops			Backup supersnoop logs.
	-user			Backup user files.
	-mbox			Backup mailboxes.
	-room			Backup room files.
	-board			Backup board files.
	-all   or   -lib	Backup all files in lib.
	-del_old <days>		Delete backup files over <days> days old.

	These arguments can be combined.
	Example: do_backups -v -mail user@host -user -q -nomail -room
EOF
}

# mailto <filename>
mailto()
{
	if [ $mailto -eq 1 ]; then
		base=`basename $1`
		uuencode $base < $1 | \
		    mail -s"JeamLand backup: $base" $mailtoaddr
	fi
}

# backup(backup filename, directory)
backup()
{
	cd $LIB/..

	fname=${BACKUPS}/$1.${NOW}.gz

	tar -c${verbose}f - $2 | gzip -9${verbose} > $fname
	mailto $fname
}

backup_audit()
{
	cd $LIB/..

	backup audit lib/secure/audit
	rm -f lib/secure/audit/*
}

backup_snoops()
{
	cd $LIB/..

	backup snoops lib/secure/snoops
	rm -f lib/secure/snoops/guest*
}

delete_old()
{
	if [ "x$verbose" = "xv" ]; then
		arg=-print
	else
		arg=
	fi
	find $BACKUPS -name \*.gz -mtime +$1 -exec rm {} \; $arg
}

if [ "x$HOME" = 'x' ]; then
	echo 'do_backups: HOME variable not set!'
	exit 1
fi
if [ ! -d $BACKUPS ]; then
	$ECHO "do_backups: $BACKUPS is not a directory!"
	exit
fi
if [ ! -d $LIB ]; then
	$ECHO "do_backups: $LIB is not a directory!"
	exit
fi

if [ $# -lt 1 ]; then
	usage
	exit 1
fi

umask 077

NOW=`date +\%b\%d`
mailto=0
verbose=

while [ $# -gt 0 ]; do
	if [ $1 = "-mail" ]; then
		if [ $# -lt 2 ]; then
			echo 'Syntax: do_backups -mail <address> ...'
			exit 1
		fi
		mailtoaddr=$2
		mailto=1
		shift
		shift
	elif [ $1 = "-nomail" ]; then
		mailto=0
		shift
	elif [ $1 = "-v" ]; then
		verbose=v
		shift
	elif [ $1 = "-q" ]; then
		verbose=
		shift
	elif [ $1 = "-audit" ]; then
		backup_audit
		shift
	elif [ $1 = "-logs" ]; then
		backup logs lib/log
		shift
	elif [ $1 = "-snoops" ]; then
		backup_snoops
		shift
	elif [ $1 = "-user" ]; then
		backup user lib/users
		shift
	elif [ $1 = "-mbox" ]; then
		backup mail lib/mail
		shift
	elif [ $1 = "-room" ]; then
		backup room lib/room
		shift
	elif [ $1 = "-board" ]; then
		backup board lib/board
		shift
	elif [ $1 = "-all" -o $1 = "-lib" ]; then
		backup lib lib
		shift
	elif [ $1 = "-del_old" ]; then
		if [ $# -lt 2 ]; then
			echo 'Syntax: do_backups -del_old <days> ...'
			exit 1
		fi
		delete_old $2
		shift
		shift
	else
		usage
		exit 1
	fi
done

